<!DOCTYPE html>
<html lang="en" data-theme="dark">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Conference Registration</title>
  <style>
    :root {
      --bg: #0e0a14;
      --panel: #141126;
      --panel-elev: #17112b;
      --text: #eceaf6;
      --muted: #cfc4ff;
      --primary: #b79bff;
      --primary-600: #a785ff;
      --primary-700: #9670ff;
      --accent-1: #d6c9ff;
      --success-bg: #221639;
      --success-text: #e3dbff;
      --success-glow: rgba(214,201,255,0.25);
      --error-bg: #2a0f13;
      --error-text: #fcb0b0;
      --border: #3a2b57;
      --table-stripe: #1a1430;
      --shadow: 0 10px 25px rgba(0,0,0,0.35);
      --radius: 12px;
      --gap-field-top: 40px;
      --trail-color: 183,155,255; /* rgb for glow trail */
    }

    @media (prefers-color-scheme: dark) { :root { color-scheme: dark; } }

    * { box-sizing: border-box; }
    html, body { height: 100%; }
    body {
      font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Noto Sans, Ubuntu, Cantarell, Helvetica Neue, Arial, "Apple Color Emoji", "Segoe UI Emoji";
      margin: 0; padding: 0; background: radial-gradient(1200px 800px at 10% 10%, #221a3b 0%, #130f23 60%, #100c1c 100%);
      color: var(--text);
    }

    /* glow canvas sits behind content */
    #glow-canvas { position: fixed; inset: 0; z-index: 0; pointer-events: none; }

    header { position: sticky; top: 0; z-index: 10; background: rgba(34,26,59,0.65); backdrop-filter: blur(8px); border-bottom: 1px solid var(--border); padding: 16px 24px; }
    header .brand { display: flex; align-items: center; gap: 12px; font-weight: 700; letter-spacing: 0.2px; }
    .logo { width: 28px; height: 28px; border-radius: 8px; background: linear-gradient(135deg, var(--primary) 0%, var(--accent-1) 100%); box-shadow: 0 4px 12px rgba(183,155,255,0.45); display: grid; place-items: center; overflow: hidden; }
    .logo svg { width: 18px; height: 18px; filter: drop-shadow(0 2px 4px rgba(0,0,0,0.25)); }

    main { max-width: 1100px; margin: 32px auto; padding: 0 16px; position: relative; z-index: 1; }

    .card { background: linear-gradient(180deg, var(--panel) 0%, var(--panel-elev) 100%); border: 1px solid var(--border); border-radius: var(--radius); box-shadow: var(--shadow); margin-bottom: 16px; }
    .card .content { padding: 20px 22px; }

    .grid { display: grid; grid-template-columns: 1fr; gap: 18px; }
    @media (min-width: 880px) { .grid { grid-template-columns: 1.05fr 1fr; } }
    .grid-1 { display: grid; grid-template-columns: 1fr; gap: 14px; }

    label { display: block; font-weight: 600; margin-bottom: 8px; color: var(--muted); }
    input, select { width: 100%; padding: 12px 14px; border: 1px solid var(--border); border-radius: 10px; background: #1b1533; color: var(--text); outline: none; transition: border-color .15s ease, box-shadow .15s ease; }
    input:focus, select:focus { border-color: var(--primary); box-shadow: 0 0 0 4px rgba(183,155,255,0.25); }

    button { appearance: none; background: linear-gradient(180deg, var(--primary) 0%, var(--primary-600) 100%); color: #1a1030; border: 0; padding: 12px 16px; border-radius: 10px; cursor: pointer; font-weight: 700; box-shadow: 0 8px 20px rgba(151,112,255,0.35); transition: transform .04s ease, box-shadow .15s ease, filter .15s ease; }
    button:hover { filter: brightness(1.03); box-shadow: 0 10px 24px rgba(151,112,255,0.45); }
    button:active { transform: translateY(1px); }

    .flash { position: relative; display: flex; align-items: center; gap: 10px; background: var(--success-bg); color: var(--success-text); padding: 12px 14px; border-radius: 10px; margin-bottom: 12px; border: 1px solid rgba(214,201,255,0.45); box-shadow: 0 0 0 0 var(--success-glow), 0 10px 20px rgba(0,0,0,0.25); opacity: 0; transform: translateY(-6px); animation: flash-in .35s ease forwards; }
    .flash::before { content: ''; position: absolute; inset: -2px; border-radius: 12px; background: radial-gradient(120px 40px at 10% 10%, var(--success-glow), transparent 70%); filter: blur(6px); pointer-events: none; z-index: 0; }
    .flash-icon { width: 18px; height: 18px; flex: 0 0 18px; color: var(--success-text); opacity: 0.95; }
    .flash.hide { animation: flash-out .25s ease forwards; }

    .error { background: var(--error-bg); color: var(--error-text); padding: 12px 14px; border-radius: 10px; margin-bottom: 12px; border: 1px solid rgba(252,165,165,0.25); }

    @keyframes flash-in { from { opacity: 0; transform: translateY(-6px); } to { opacity: 1; transform: translateY(0); } }
    @keyframes flash-out { from { opacity: 1; transform: translateY(0); } to { opacity: 0; transform: translateY(-6px); } }

    table { width: 100%; border-collapse: collapse; overflow: hidden; border-radius: 10px; border: 1px solid var(--border); }
    thead th { background: #241c42; color: var(--muted); font-weight: 700; }
    th, td { text-align: left; padding: 12px; border-bottom: 1px solid var(--border); }
    tbody tr:nth-child(odd) { background: var(--table-stripe); }

    .section-title { margin: 0 0 2px 0; font-size: 18px; letter-spacing: .2px; color: var(--accent-1); }
    .section-title + .section-spacer { height: var(--gap-field-top); }
    .section-title + form .grid-1 > div:first-child { margin-top: var(--gap-field-top); }

    small { color: var(--muted); }
  </style>
</head>
<body>
  <canvas id="glow-canvas" aria-hidden="true"></canvas>
  <header>
    <div class="brand"><span class="logo">
      <!-- Inline CodeGryphon icon: stylized "CG" monogram -->
      <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
        <defs>
          <linearGradient id="g1" x1="0" y1="0" x2="1" y2="1">
            <stop offset="0" stop-color="#ffffff" stop-opacity="0.95"/>
            <stop offset="1" stop-color="#e6dcff" stop-opacity="0.85"/>
          </linearGradient>
        </defs>
        <path d="M6 12a6 6 0 1 1 2.3 4.7" fill="none" stroke="url(#g1)" stroke-width="2.2" stroke-linecap="round"/>
        <path d="M14 12c0 2.2 1.8 4 4 4h0" fill="none" stroke="url(#g1)" stroke-width="2.2" stroke-linecap="round"/>
      </svg>
    </span> <span>Conference Registration</span></div>
  </header>
  <main>
    <div class="card">
      <div class="content">
        <% if flash %>
          <div id="flash" class="flash">
            <svg class="flash-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
              <path d="M9 12.75l2 2 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <circle cx="12" cy="12" r="9" stroke="currentColor" stroke-width="1.5" opacity="0.35"/>
            </svg>
            <span><%= Rack::Utils.escape_html(flash) %></span>
          </div>
          <script>
            (function(){
              function run(){
                document.cookie = 'flash=; Max-Age=0; Path=/; SameSite=Lax';
                var el = document.getElementById('flash');
                if (!el) return;
                var visibleMs = 1200;
                setTimeout(function(){
                  el.classList.add('hide');
                  el.addEventListener('animationend', function(){ el.remove(); }, { once: true });
                }, visibleMs);
              }
              if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', run); } else { run(); }
            })();
          </script>
        <% end %>
        <%= content %>
      </div>
    </div>
  </main>

  <script>
    (function(){
      var prefersReduced = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      if (prefersReduced) return; // accessibility: disable effect

      var canvas = document.getElementById('glow-canvas');
      if (!canvas) return;
      var ctx = canvas.getContext('2d');
      var dpr = Math.max(1, Math.min(2, window.devicePixelRatio || 1));
      var points = [];
      var sparkles = [];

      // comet-like short, soft trail with bright head sparkle
      var maxPoints = 10;   // short tail
      var fade = 0.16;      // quick fade for shortness/softness
      var jitter = 0.1;     // tiny brightness jitter for twinkle

      function resize(){
        canvas.width = Math.floor(window.innerWidth * dpr);
        canvas.height = Math.floor(window.innerHeight * dpr);
        canvas.style.width = window.innerWidth + 'px';
        canvas.style.height = window.innerHeight + 'px';
        ctx.setTransform(dpr,0,0,dpr,0,0);
      }
      resize();
      window.addEventListener('resize', resize);

      function addPoint(x, y){
        var now = performance.now();
        points.push({ x: x, y: y, t: now });
        if (points.length > maxPoints) points.shift();
        // subtle micro-sparkle near head
        if (Math.random() < 0.18) {
          sparkles.push({ x:x + (Math.random()-0.5)*6, y:y + (Math.random()-0.5)*6, t: now, life: 240 + Math.random()*140 });
          if (sparkles.length > 20) sparkles.shift();
        }
      }

      var lastMove = 0;
      function onMove(x, y){ addPoint(x,y); lastMove = performance.now(); }

      window.addEventListener('mousemove', function(e){ onMove(e.clientX, e.clientY); }, { passive: true });
      window.addEventListener('touchmove', function(e){ var t = e.touches[0]; if (t) onMove(t.clientX, t.clientY); }, { passive: true });

      function drawTrail(){
        var color = getComputedStyle(document.documentElement).getPropertyValue('--trail-color').trim();
        // draw from tail to head with tapering radius and alpha
        for (var i = 0; i < points.length; i++) {
          var p = points[i];
          var age = (i + 1) / points.length; // 0..1 (tail -> head)
          // smaller, softer tail; slight directional stretch by drawing multiple small circles
          var radius = 4 + 9 * (1 - age); // 4..13
          var coreAlpha = 0.4 * (1 - age) + 0.06; // softer tail

          var g = ctx.createRadialGradient(p.x, p.y, 0, p.x, p.y, radius);
          g.addColorStop(0.0, 'rgba(' + color + ',' + coreAlpha + ')');
          g.addColorStop(0.3, 'rgba(' + color + ',' + (coreAlpha*0.35) + ')');
          g.addColorStop(1.0, 'rgba(' + color + ',0)');
          ctx.fillStyle = g;
          ctx.beginPath();
          ctx.arc(p.x, p.y, radius, 0, Math.PI * 2);
          ctx.fill();
        }

        // bright comet head sparkle
        if (points.length){
          var head = points[points.length - 1];
          var color = getComputedStyle(document.documentElement).getPropertyValue('--trail-color').trim();
          var twinkle = 0.9 + (Math.random()*jitter);
          // tiny core
          ctx.fillStyle = 'rgba(' + color + ',' + Math.min(1, twinkle) + ')';
          ctx.beginPath(); ctx.arc(head.x, head.y, 2.4, 0, Math.PI*2); ctx.fill();
          // small glow around head for comet feel
          var hg = ctx.createRadialGradient(head.x, head.y, 0, head.x, head.y, 18);
          hg.addColorStop(0.0, 'rgba(' + color + ',0.45)');
          hg.addColorStop(1.0, 'rgba(' + color + ',0)');
          ctx.fillStyle = hg;
          ctx.beginPath(); ctx.arc(head.x, head.y, 18, 0, Math.PI*2); ctx.fill();
        }
      }

      function drawSparkles(now){
        var color = getComputedStyle(document.documentElement).getPropertyValue('--trail-color').trim();
        for (var i = sparkles.length - 1; i >= 0; i--) {
          var s = sparkles[i];
          var dt = now - s.t;
          if (dt > s.life) { sparkles.splice(i,1); continue; }
          var k = 1 - (dt / s.life);
          var alpha = 0.35 * k;
          var r = 1.2 + 2.6 * k;
          ctx.fillStyle = 'rgba(' + color + ',' + alpha + ')';
          ctx.beginPath(); ctx.arc(s.x, s.y, r, 0, Math.PI*2); ctx.fill();
        }
      }

      function draw(){
        ctx.fillStyle = 'rgba(0,0,0,' + fade + ')';
        ctx.fillRect(0,0,canvas.width/dpr, canvas.height/dpr);

        var now = performance.now();
        drawTrail();
        drawSparkles(now);

        if (performance.now() - lastMove > 380 && points.length > 0) points.shift();
        requestAnimationFrame(draw);
      }

      ctx.fillStyle = 'rgba(0,0,0,1)';
      ctx.fillRect(0,0,canvas.width/dpr, canvas.height/dpr);
      requestAnimationFrame(draw);
    })();
  </script>
</body>
</html>